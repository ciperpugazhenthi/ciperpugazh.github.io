{"version":3,"sources":["WebarSdkSurface.js","Scripts/video-texture.js","Scripts/SphereRender.js","Scripts/stencil-mask.js","Scripts/stencil-subject.js","Scripts/VideoPlayTesting.js","Scripts/CollisionDetector.js","Scripts/ButtonEvents.js"],"names":[],"mappings":"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","sourcesContent":["// WebarSdkSurface.js\nvar WebarSdkSurface = pc.createScript('WebarSdkSurface');\n\n\nWebarSdkSurface.attributes.add('webarSdkCamera', {\n    title: 'Webar Camera',\n    type: 'entity'\n});\n\nWebarSdkSurface.attributes.add('webarSdkStage', {\n    title: 'Webar Stage',\n    type: 'entity'\n});\n\n// WebarSdkSurface.attributes.add('webarSdkSphere', {\n//     title: 'Webar Sphere',\n//     type: 'entity'\n// });\n\n// initialize Webar SDK with playcanvas entity details\nWebarSdkSurface.prototype.initialize = function() {\n    WEBARSDK.InitPlayCanvas('application-canvas', this.webarSdkCamera, this.webarSdkStage);//, this.webarSdkSphere);\n};\n\n\n","// video-texture.js\nvar VideoTexture = pc.createScript('videoTexture');\n\nVideoTexture.attributes.add('videoAsset', {\n    title: 'Video Asset',\n    description: 'MP4 video asset to play back on this video texture.',\n    type: 'asset'\n});\n\nVideoTexture.attributes.add('videoUrl', {\n    title: 'Video Url',\n    description: 'URL to use if there is video asset selected',\n    type: 'string'\n});\n\nVideoTexture.attributes.add('playEvent', {\n    title: 'Play Event',\n    description: 'Event that is fired as soon as the video texture is ready to play.',\n    type: 'string',\n    default: ''\n});\n\n// initialize code called once per entity\nVideoTexture.prototype.initialize = function() {\n    var app = this.app;\n    \n    // Create HTML Video Element to play the video\n    var video = document.createElement('video');\n    video.loop = true;\n\n    // muted attribute is required for videos to autoplay\n    video.muted = true;\n\n    // critical for iOS or the video won't initially play, and will go fullscreen when playing\n    video.playsInline = true;\n    \n    // needed because the video is being hosted on a different server url\n    video.crossOrigin = \"anonymous\";\n    \n    // autoplay the video\n    video.autoplay = true;\n\n    // iOS video texture playback requires that you add the video to the DOMParser\n    // with at least 1x1 as the video's dimensions\n    var style = video.style;\n    style.width = '1px';\n    style.height = '1px';\n    style.position = 'absolute';\n    style.opacity = '0';\n    style.zIndex = '-1000';\n    style.pointerEvents = 'none';\n\n    document.body.appendChild(video);\n\n    // Create a texture to hold the video frame data            \n    this.videoTexture = new pc.Texture(app.graphicsDevice, {\n        format: pc.PIXELFORMAT_R8_G8_B8,\n        minFilter: pc.FILTER_LINEAR_MIPMAP_LINEAR,\n        magFilter: pc.FILTER_LINEAR,\n        addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n        addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n        mipmaps: true\n    });\n    this.videoTexture.setSource(video);\n\n    video.addEventListener('canplaythrough', function (e) {\n        app.fire(this.playEvent, this.videoTexture);\n        video.play();\n    }.bind(this));\n        \n    // set video source\n    video.src = this.videoAsset ? this.videoAsset.getFileUrl() : this.videoUrl;    \n    \n    document.body.appendChild(video);\n    video.load();\n\n    this.on('destroy', function() {\n        this.videoTexture.destroy();\n        video.remove();\n    }, this);\n};\n\n// update code called every frame\nVideoTexture.prototype.update = function(dt) {\n    // Transfer the latest video frame to the video texture\n    this.videoTexture.upload();\n};\n\n\n","// SphereRender.js\nvar SphereRender = pc.createScript('sphereRender');\n\nSphereRender.attributes.add('screenMaterial', {\n    title: 'Screen Material',\n    description: 'The screen material of the TV that displays the video texture.',\n    type: 'asset',\n    assetType: 'material'\n});\nSphereRender.attributes.add('playEvent', {\n    title: 'Play Event',\n    description: 'Set the TV screen material emissive map on this event.',\n    type: 'string',\n    default: ''\n});\n\n// initialize code called once per entity\nSphereRender.prototype.initialize = function() {\n    this.app.on(this.playEvent, function (videoTexture) {\n        var material = this.screenMaterial.resource;\n        material.emissiveMap = videoTexture;\n        material.update();\n    }, this);\n};\n// update code called every frame\nSphereRender.prototype.update = function(dt) {\n\n};\n\n// swap method called for script hot-reloading\n// inherit your script state here\n// SphereRender.prototype.swap = function(old) { };\n\n// to learn more about script anatomy, please read:\n// https://developer.playcanvas.com/en/user-manual/scripting/\n\n","// stencil-mask.js\nvar StencilMask = pc.createScript('stencilMask');\n\nStencilMask.attributes.add('maskID', {\n    title: 'Mask ID',\n    description: 'This mask id should be an integer between 0 and 7, as it relates as the power of 2 to the actual mask id.',\n    type: 'number',\n    default: 0,\n    min: 0,\n    max: 7,\n    precision: 0,\n});\n\n\nStencilMask.prototype.initialize = function () {    \n    this._setStencil();\n    this.on('attr', this._attributeReloading);\n};\n\n\nStencilMask.prototype._setStencil = function () {\n    var mask = Math.pow(2, this.maskID);\n\n    var stencil = new pc.StencilParameters({\n        readMask: mask,\n        writeMask: mask,\n        ref: mask,\n        zpass: pc.STENCILOP_REPLACE\n    });\n\n    this._setModelAsStencil(stencil);\n};\n\n\nStencilMask.prototype._setModelAsStencil = function (stencilParameter) {\n    var meshInstances = null;\n\n    if (this.entity.render) {\n        meshInstances = this.entity.render.meshInstances;\n    }\n\n    if (this.entity.model) {\n        meshInstances = this.entity.model.meshInstances;\n    }\n\n    if (meshInstances && meshInstances.length > 0) {\n        var mat = meshInstances[0].material.clone();\n        mat.stencilBack = mat.stencilFront = stencilParameter;\n\n        // Don't write to color, only to stencil\n        mat.redWrite = mat.greenWrite = mat.blueWrite = mat.alphaWrite = false;\n        meshInstances[0].material = mat;\n        mat.update();\n    }\n};\n\n\nStencilMask.prototype.swap = function (old) {\n    this.on('attr', this._attributeReloading);\n};\n\n\nStencilMask.prototype._attributeReloading = function (name, value, prev) {\n    this._setStencil();\n};\n\n","// stencil-subject.js\nvar StencilSubject = pc.createScript('stencilSubject');\n\nStencilSubject.attributes.add('showInside', {\n    title: 'Show',\n    description: 'Determines whether this entity will be shown inside or outside of a mask with the given ID.\\n' +\n        'If multiple ID\\'s are passed: \\n' +\n        '- If \\'Inside\\' is chosen, only the parts which are inside all of the given IDs will be shown.\\n' +\n        '- If \\'Outside\\' is chosen, the parts which are outside any of the given IDs will be shown.\\n',\n    type: 'boolean',\n    default: true,\n    enum: [\n        { 'Inside': true },\n        { 'Outside': false },\n    ],\n});\n\nStencilSubject.attributes.add('maskIDs', {\n    title: 'Mask IDs',\n    description: 'These ID\\'s have to be between 0 and 7.',\n    type: 'number',\n    array: true,\n    default: [0],\n});\n\n\nStencilSubject.prototype.postInitialize = function () {\n    var i = 0;\n    var j = 0;\n    this._meshInstances = [];\n    \n    var renders = this.entity.findComponents('render');\n\n    for (i = 0; i < renders.length; ++i) {\n        meshInstances = renders[i].meshInstances;\n        for (j = 0; j < meshInstances.length; j++) {\n            this._meshInstances.push(meshInstances[j]);\n        }\n    }\n\n    var models = this.entity.findComponents('model');\n    for (i = 0; i < models.length; ++i) {\n        meshInstances = models[i].meshInstances;\n        for (j = 0; j < meshInstances.length; j++) {\n            this._meshInstances.push(meshInstances[j]);\n        }\n    }\n    \n    this._setStencil();\n\n    this.app.on('setsubjectstencil', function (stencilval) {\n        console.log(\"sphere shader click\");\n        this.showInside = stencilval;\n        this._setStencil();\n\n    }, this);\n\n    this.on('attr', this._attributeReloading);\n};\n\n\nStencilSubject.prototype._setStencil = function () {\n    if (!this._addMaskIDs()) {\n        return;\n    }\n\n    var stencil = new pc.StencilParameters({\n        readMask: this.maskID,\n        writeMask: this.maskID,\n        ref: this.maskID,\n        func: this.showInside ? pc.FUNC_EQUAL : pc.FUNC_NOTEQUAL,\n    });\n\n    this._setStencilForModel(stencil);\n    this._setStencilForParticle(stencil);\n    this._setStencilForSpine(stencil);\n    this._setStencilForSprite(stencil);\n};\n\n\nStencilSubject.prototype._addMaskIDs = function () {\n    this.maskID = 0;\n\n    // Check if the mask has the right length\n    if (this.maskIDs.length > 8) {\n        return false;\n    }\n\n    for (var i = 0; i < this.maskIDs.length; ++i) {\n        var id = Math.floor(this.maskIDs[i]);\n\n        if (id >= 0 && id < 8) {\n            this.maskID += Math.pow(2, id);\n        }\n        else {\n            // Check if the mask has the right length\n            return false;\n        }\n    }\n\n    return true;\n};\n\n\nStencilSubject.prototype._setStencilForModel = function (stencil) {\n    for (var i = 0; i < this._meshInstances.length; i++) {\n        this._meshInstances[i].layer = pc.LAYER_WORLD - 1;\n        var mat = this._meshInstances[i].material.clone();\n        mat.stencilBack = mat.stencilFront = stencil;\n        this._meshInstances[i].material = mat;\n    }\n};\n\n\nStencilSubject.prototype._setStencilForParticle = function (stencil) {\n    if (this.entity.particlesystem) {\n        this.entity.particlesystem.emitter.meshInstance.layer = pc.LAYER_WORLD - 1;\n        var mat = this.entity.particlesystem.emitter.material;\n        mat.stencilBack = mat.stencilFront = stencil;\n    }\n};\n\n\nStencilSubject.prototype._setStencilForSpine = function (stencil) {\n    if (this.entity.spine) {\n        var model = this.entity.spine.spine._model;\n\n    for (var i = 0; i < this._meshInstances.length; i++) {\n            this._meshInstances[i].layer = pc.LAYER_WORLD - 1;\n            var mat = this._meshInstances[i].material;\n            mat.stencilBack = mat.stencilFront = stencil;\n        }\n    }\n};\n\n\nStencilSubject.prototype._setStencilForSprite = function (stencil) {\n    if (this.entity.sprite) {\n        // Waring: Private API\n        var model = this.entity.sprite._model;\n\n        model.meshInstances[0].layer = pc.LAYER_WORLD - 1;\n        var mat = model.meshInstances[0].material.clone();\n        mat.stencilBack = mat.stencilFront = stencil;\n        model.meshInstances[0].material = mat;\n    }\n};\n\n\nStencilSubject.prototype.swap = function (stencil) {\n    this.on('attr', this._attributeReloading);\n};\n\n\nStencilSubject.prototype._attributeReloading = function (name, value, prev) {\n    this._setStencil();\n};\n\n","// VideoPlayTesting.js\nvar VideoPlayTesting = pc.createScript('videoPlayTesting');\n\n// initialize code called once per entity\nVideoPlayTesting.prototype.initialize = function() {\n\n};\n\n// update code called every frame\nVideoPlayTesting.prototype.update = function(dt) {\n\n};\n\n// swap method called for script hot-reloading\n// inherit your script state here\n// VideoPlayTesting.prototype.swap = function(old) { };\n\n// to learn more about script anatomy, please read:\n// https://developer.playcanvas.com/en/user-manual/scripting/\nfunction example(canvas) {\n    // Create the application and start the update loop\n    const app = new pc.Application(canvas, {});\n\n    const assets = {\n        tv: new pc.Asset(\"tv\", \"container\", {\n            url: \"/static/assets/models/tv.glb\",\n        }),\n    };\n\n    const assetListLoader = new pc.AssetListLoader(\n        Object.values(assets),\n        app.assets\n    );\n    assetListLoader.load(() => {\n        app.start();\n\n        // Set the canvas to fill the window and automatically change resolution to be the same as the canvas size\n        app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n        app.setCanvasResolution(pc.RESOLUTION_AUTO);\n\n        app.scene.ambientLight = new pc.Color(0.2, 0.2, 0.2);\n\n        // Create an Entity with a camera component\n        const camera = new pc.Entity();\n        camera.addComponent(\"camera\", {\n            clearColor: new pc.Color(0.4, 0.45, 0.5),\n        });\n\n        camera.translate(0, 0, 15);\n\n        // Create an Entity with a omni light\n        const light = new pc.Entity();\n        light.addComponent(\"light\", {\n            type: \"omni\",\n            color: new pc.Color(1, 1, 1),\n            range: 30,\n        });\n\n        light.translate(5, 5, 10);\n\n        app.root.addChild(camera);\n        app.root.addChild(light);\n\n        // Create a texture to hold the video frame data\n        const videoTexture = new pc.Texture(app.graphicsDevice, {\n            format: pc.PIXELFORMAT_RGB565,\n            mipmaps: false,\n            minFilter: pc.FILTER_LINEAR,\n            magFilter: pc.FILTER_LINEAR,\n            addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n            addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n        });\n\n        // Create our HTML element with the video\n        const video = document.createElement(\"video\");\n        video.id = \"vid\";\n        video.loop = true;\n\n        // Muted so that we can autoplay\n        video.muted = true;\n        video.autoplay = true;\n\n        // Inline needed for iOS otherwise it plays at fullscreen\n        video.playsInline = true;\n\n        video.crossOrigin = \"anonymous\";\n\n        // Make sure that the video is in view on the page otherwise it doesn't\n        // load on some browsers, especially mobile\n        video.setAttribute(\n            \"style\",\n            \"display: block; width: 1px; height: 1px; position: absolute; opacity: 0; z-index: -1000; top: 0px; pointer-events: none\"\n        );\n\n        video.src = \"/static/assets/Video/Sample360Video.mp4\";\n        document.body.append(video);\n\n        video.addEventListener(\"canplaythrough\", function () {\n            videoTexture.setSource(video);\n        });\n\n        // create an entity to render the tv mesh\n        const entity = assets.tv.resource.instantiateRenderEntity();\n        app.root.addChild(entity);\n\n        // Create a material that will use our video texture\n        const material = new pc.StandardMaterial();\n        material.useLighting = false;\n        material.emissiveMap = videoTexture;\n        material.update();\n\n        // set the material on the screen mesh\n        entity.render.meshInstances[1].material = material;\n\n        video.load();\n\n        const mouse = new pc.Mouse(document.body);\n        mouse.on(\"mousedown\", function (event) {\n            if (entity && event.buttons[pc.MOUSEBUTTON_LEFT]) {\n                video.muted = !video.muted;\n            }\n        });\n\n        let upload = false;\n        let time = 0;\n        app.on(\"update\", function (dt) {\n            time += dt;\n\n            // rotate the tv object\n            entity.setLocalEulerAngles(100 + Math.sin(time) * 50, 0, -90);\n\n            // Upload the video data to the texture every other frame\n            upload = !upload;\n            if (upload) {\n                videoTexture.upload();\n            }\n        });\n    });\n}\n\n\n","// CollisionDetector.js\nvar CollisionDetector = pc.createScript('collisionDetector');\n\nCollisionDetector.attributes.add('_360sphere', {\n    title: 'World',\n    type: 'entity'\n});\n\nCollisionDetector.attributes.add('eventName', { type: 'string', title: 'Event Name' });\nCollisionDetector.attributes.add('stencilval', { type: 'boolean', title: 'Sphere Setter' });\n\n// initialize code called once per entity\nCollisionDetector.prototype.initialize = function() {\n    this.entity.collision.on('triggerenter', this.onTriggerEnter, this);\n\n};\n\n// update code called every frame\nCollisionDetector.prototype.update = function(dt) {\n\n};\n\nCollisionDetector.prototype.onTriggerEnter = function(other){\n    if(other.tags.has('player')==true){\n        console.log('trying to get value and collided obj is '+other.name);\n        console.log('sphere name is');\n        this.app.fire(this.eventName, this.stencilval);\n        // var worldsphere = this.app.root.findByTag('World');\n        // worldsphere.entity.script._setStincil();\n    }\n};\n\n// swap method called for script hot-reloading\n// inherit your script state here\n// CollisionDetector.prototype.swap = function(old) { };\n\n// to learn more about script anatomy, please read:\n// https://developer.playcanvas.com/en/user-manual/scripting/\n\n","// ButtonEvents.js\nvar ButtonAction = pc.createScript('buttonAction');\n\nButtonAction.attributes.add('eventName', { type: 'string', title: 'Event Name' });\nButtonAction.attributes.add('stencilval', { type: 'boolean', title: 'Sphere Setter' });\n\nButtonAction.prototype.initialize = function() {\n    this.entity.button.on('click', function () {\n        this.app.fire(this.eventName, this.stencilval);\n    }, this);\n};\n\n// initialize code called once per entity\nButtonAction.prototype.initialize = function() {\n\n};\n\n// update code called every frame\nButtonAction.prototype.update = function(dt) {\n\n};\n\n// swap method called for script hot-reloading\n// inherit your script state here\n// ButtonAction.prototype.swap = function(old) { };\n\n// to learn more about script anatomy, please read:\n// https://developer.playcanvas.com/en/user-manual/scripting/\n\n"]}